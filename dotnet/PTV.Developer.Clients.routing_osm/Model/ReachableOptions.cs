/*
 * Routing OSM
 *
 * With the Routing OSM service you can calculate routes from a list of waypoints based on open street map data.
 *
 * The version of the OpenAPI document: 1.5
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routing_osm.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routing_osm.Model
{
    /// <summary>
    /// ReachableOptions
    /// </summary>
    [DataContract(Name = "ReachableOptions")]
    public partial class ReachableOptions : IEquatable<ReachableOptions>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DrivingDirection
        /// </summary>
        [DataMember(Name = "drivingDirection", EmitDefaultValue = false)]
        public DrivingDirection? DrivingDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReachableOptions" /> class.
        /// </summary>
        /// <param name="drivingDirection">drivingDirection.</param>
        public ReachableOptions(DrivingDirection? drivingDirection = default(DrivingDirection?))
        {
            this.DrivingDirection = drivingDirection;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReachableOptions {\n");
            sb.Append("  DrivingDirection: ").Append(DrivingDirection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReachableOptions);
        }

        /// <summary>
        /// Returns true if ReachableOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of ReachableOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReachableOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DrivingDirection == input.DrivingDirection ||
                    this.DrivingDirection.Equals(input.DrivingDirection)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DrivingDirection.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
